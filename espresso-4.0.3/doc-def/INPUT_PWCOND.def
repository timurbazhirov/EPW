input_description -distribution {Quantum Espresso} -package PWscf -program pwcond.x {  

    toc {}

    intro {
	This program computes the transmittance of a system and/or its
	complex band structure. 
	It is controlled through the following variables 
	in the namelist inputcond.

	Structure of the input data:
	============================

	   &INPUTCOND
	     ...
	   /
    }

    namelist INPUTCOND {

	var outdir  -type CHARACTER {
	    info {
		temporary directory (as in PWscf)
	    }
	}

	var prefixt  -type CHARACTER {
	    info {
		prefix for the file (as in PWscf) containing all the
		regions (left lead + scatt. reg. + right lead)
	    }
	}

	var prefixl  -type CHARACTER {
	    info {
		prefix for the file containing only the	left lead
	    }
	}

	var prefixs  -type CHARACTER {
	    info {
		prefix for the file containing the scattering region
	    }
	}

	var prefixr  -type CHARACTER {
	    info {
		prefix for the file containing only the right lead
	    }
	}

	var band_file  -type CHARACTER  {
	    info {
		file on which the complex bands are saved
	    }
	}

	var tran_file  -type CHARACTER  {
	    info {
		file where the transmission is written
	    }
	}

	var save_file  -type CHARACTER  {
	    info {
		file where the data necessary for PWCOND are written
		so that no prefix files of PW are longer needed
	    }
	}
	var fil_loc  -type  CHARACTER {
	    info {
		file on/from which the 2D eigenvalue problem data are
		saved/read
	    }
	}

	var lwrite_cond  -type LOGICAL {
	    info {
		if .t. save the data necessary for PWCOND in save_file
	    }
	}

	var lread_cond  -type LOGICAL {
	    info {
		if .t. read the data necessary for PWCOND from save_file
	    }
	}

	var lwrite_loc  -type LOGICAL {
	    info {
		if .t. save 2D eigenvalue problem result in fil_loc
	    }
	}

	var lread_loc  -type LOGICAL {
	    info {
		if .t. read 2D eigenvalue problem result from fil_loc
	    }
	}

	var ikind  -type INTEGER {
	    info {
   	       The kind of conductance calculation:
   
                  ikind=0  - just complex band structure (CBS) calculation
   
                  ikind=1  - conductance calculation with identical 
                             left and right leads
   
                  ikind=2  - conductance calculation with different
		             left and right leads       
	    }
	}

	var iofspin  -type INTEGER {
	    info {
		spin index for which the calculations are performed
	    }
	}

	var llocal  -type  LOGICAL {
	    info {
		if .t. calculations are done with only local part of PP 
	    }
	}

	var bdl  -type REAL {
	    info {
		right boundary of the left lead (left one is supposed to be at 0) 
	    }
	}

	var bds  -type REAL {
	    info {
		right boundary of the scatt. reg. (left one is at 0 if prefixs
                is used and = bdl if prefixt is used) 
	    }
	}

	var bdr  -type REAL {
	    info {
		right boundary of the right lead (left one is at 0 if prefixr
		is used and = bds if prefixt is used) 
	    }
	}

	var nz1  -type INTEGER {
	    info {
		the number of subslabs in the slab (to calculate integrals)
	    }
	}

	var energy0  -type REAL {
	    info {
		initial energy 
	    }
	}

	var denergy  -type REAL {
	    info {
		energy step (if denergy=0.0 the energy is read from the list)
	    }
	}

	var nenergy  -type INTEGER {
	    info {
		number of energies 

		WARNING: the energy in input file is given in eV taken from Ef,
		         and denergy should be negative
	    }
	}
	var ecut2d -type  REAL {
	    info {
		2-D cutoff
	    }
	}
	var ewind  -type REAL { 
	    info {      
		the energy window for reduction of 2D plane wave basis set (in XY)
	    }
	}

	var epsproj  -type REAL {
	    info {
		accuracy of 2D basis set reduction
	    }
	}

	var orbj_in  -type REAL {
	    info {
		the initial orbital for projecting the transmission 
	    }
	}

	var orbj_fin  -type REAL {
	    info {
		the final orbital for projecting the transmission 
	    }
	}
    }

    card K_and_Energy_Points -nameless 1 {
	syntax {
	    line {
		var nkpts -type INTEGER {
		    info {
			Number of k_\perp points
		    }
		}
	    }
	    table k_points {
		rows -start 1 -end nkpts {
		    colgroup -type REAL {
			col kx
			col ky
			col weight
			info {
			    k-point coordinates and weights
			}
		    }
		}
	    }
	    line {
		var nenergy -type INTEGER {
		    info {
			number of energy points
		    }
		}
	    }
	}
    }
}




